# Mjesečni trend troškova
output$mjesecni_trend <- renderPlotly({
df <- troskovi_data() %>%
filter(kategorija %in% input$kategorije) %>%
group_by(mjesec, kategorija) %>%
summarise(ukupno = sum(iznos))
p <- ggplot(df, aes(x = mjesec, y = ukupno, color = kategorija)) +
geom_line() +
geom_point() +
labs(title = paste("Mjesečni trend troškova za", input$godina),
x = "Mjesec",
y = "Iznos (kn)") +
theme_minimal()
ggplotly(p)
})
# Godišnji pie chart
output$godisnji_pie <- renderPlotly({
df <- troskovi_data() %>%
filter(kategorija %in% input$kategorije) %>%
group_by(kategorija) %>%
summarise(ukupno = sum(iznos))
plot_ly(df, labels = ~kategorija, values = ~ukupno, type = 'pie') %>%
layout(title = paste("Udio troškova po kategorijama u", input$godina))
})
# Statistički pregled
output$statistika <- renderPrint({
df <- troskovi_data() %>%
filter(kategorija %in% input$kategorije) %>%
group_by(kategorija) %>%
summarise(
Prosjek = mean(iznos),
Minimum = min(iznos),
Maksimum = max(iznos),
Ukupno = sum(iznos)
)
print("Statistički pregled troškova:")
print(df)
})
# Mjesečna tablica
output$mjesecna_tablica <- renderDataTable({
troskovi_data() %>%
filter(kategorija %in% input$kategorije) %>%
group_by(mjesec, kategorija) %>%
summarise(ukupno = round(sum(iznos), 2)) %>%
spread(kategorija, ukupno)
})
# Godišnja usporedba po mjesecima
output$godisnja_usporedba <- renderPlotly({
df <- troskovi_data() %>%
filter(kategorija %in% input$kategorije) %>%
group_by(mjesec) %>%
summarise(ukupno = sum(iznos))
plot_ly(df, x = ~mjesec, y = ~ukupno, type = 'bar') %>%
layout(title = paste("Ukupni mjesečni troškovi u", input$godina),
xaxis = list(title = "Mjesec"),
yaxis = list(title = "Ukupni iznos (kn)"))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(lpSolve)
library(shinythemes)
library(plotly)
# UI definition
ui <- fluidPage(
theme = shinytheme("flatly"),
tags$head(
tags$style(HTML("
.well { background-color: #ffffff; }
.box-shadow {
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
padding: 15px;
border-radius: 5px;
margin-bottom: 20px;
background-color: white;
}
.category-header {
color: #2c3e50;
margin-bottom: 20px;
padding-bottom: 10px;
border-bottom: 2px solid #ecf0f1;
}
.pie-chart-section {
padding-top: 40px;
}
.shiny-input-container {
margin-bottom: 15px;
}
.action-button {
margin-top: 20px;
width: 100%;
}
#optimize {
background-color: #2980b9;
color: white;
padding: 10px;
font-size: 16px;
border: none;
border-radius: 5px;
transition: background-color 0.3s;
}
#optimize:hover {
background-color: #3498db;
}
"))
),
titlePanel(
div(class = "category-header",
h1("Optimizacija mjesečnog budžeta",
style = "color: #2c3e50; font-weight: 300;")
)
),
sidebarLayout(
sidebarPanel(
width = 4,
div(class = "box-shadow",
h4("Osnovne postavke", class = "category-header"),
numericInput("total_budget",
"Ukupni mjesečni budžet (€):",
value = 0, min = 0),
numericInput("savings_target",
"Željena mjesečna ušteda (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Stanovanje", class = "category-header"),
numericInput("housing_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("housing_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Hrana", class = "category-header"),
numericInput("food_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("food_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Prijevoz", class = "category-header"),
numericInput("transport_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("transport_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Luksuz/zabava", class = "category-header"),
numericInput("luxury_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("luxury_max",
"Maksimalni troškovi (€):",
value = 300, min = 0)
),
actionButton("optimize", "Optimiziraj budžet",
class = "action-button")
),
mainPanel(
width = 8,
div(class = "box-shadow",
h3("Optimalna raspodjela troškova:",
class = "category-header"),
verbatimTextOutput("results")
),
div(class = "box-shadow",
h3("Vizualizacija:",
class = "category-header"),
plotlyOutput("budget_plot"),
div(class = "pie-chart-section",
h3("Udio u ukupnom budžetu:",
class = "category-header"),
plotlyOutput("pie_chart")
)
)
)
)
)
# Server logic
server <- function(input, output) {
optimizeBudget <- eventReactive(input$optimize, {
# Postavljanje problema linearnog programiranja
# Koeficijenti funkcije cilja (minimiziramo ukupne troškove)
obj <- c(1, 1, 1, 1)  # Koeficijenti za stanovanje, hranu, prijevoz, luksuz
# Matrica ograničenja
const.mat <- matrix(c(
1, 1, 1, 1,    # Ukupni budžet
1, 0, 0, 0,    # Min stanovanje
1, 0, 0, 0,    # Max stanovanje
0, 1, 0, 0,    # Min hrana
0, 1, 0, 0,    # Max hrana
0, 0, 1, 0,    # Min prijevoz
0, 0, 1, 0,    # Max prijevoz
0, 0, 0, 1,    # Min luksuz
0, 0, 0, 1     # Max luksuz
), nrow = 9, byrow = TRUE)
# Desna strana ograničenja
rhs <- c(
input$total_budget - input$savings_target,  # Ukupni budžet minus ušteda
input$housing_min,    # Min stanovanje
input$housing_max,    # Max stanovanje
input$food_min,       # Min hrana
input$food_max,       # Max hrana
input$transport_min,  # Min prijevoz
input$transport_max,  # Max prijevoz
input$luxury_min,     # Min luksuz
input$luxury_max      # Max luksuz
)
# Znakovi ograničenja
const.dir <- c("<=", ">=", "<=", ">=", "<=", ">=", "<=", ">=", "<=")
# Rješavanje problema
solution <- lp("min", obj, const.mat, const.dir, rhs)
return(list(
status = solution$status,
solution = solution$solution
))
})
output$results <- renderPrint({
result <- optimizeBudget()
if (result$status == 0) {
total_spent <- sum(result$solution)
savings <- input$total_budget - total_spent
cat("Optimalna raspodjela troškova:\n\n")
cat(sprintf("📍 Stanovanje: %.2f €\n", result$solution[1]))
cat(sprintf("🍽️ Hrana: %.2f €\n", result$solution[2]))
cat(sprintf("🚌 Prijevoz: %.2f €\n", result$solution[3]))
cat(sprintf("🎉 Luksuz/zabava: %.2f €\n", result$solution[4]))
cat("\n--------------------------------\n")
cat(sprintf("💰 Ukupni troškovi: %.2f €\n", total_spent))
cat(sprintf("💵 Mjesečna ušteda: %.2f €\n", savings))
cat(sprintf("📊 Postotak uštede: %.1f%%\n", (savings/input$total_budget)*100))
} else {
cat("❌ Nije moguće pronaći optimalno rješenje s zadanim ograničenjima.\n")
cat("⚠️ Molimo prilagodite parametre.")
}
})
output$budget_plot <- renderPlotly({
result <- optimizeBudget()
if (result$status == 0) {
categories <- c("Stanovanje", "Hrana", "Prijevoz", "Luksuz")
plot_ly(
x = categories,
y = result$solution,
type = "bar",
marker = list(
color = c("#3498db", "#2ecc71", "#e74c3c", "#f1c40f")
)
) %>%
layout(
title = "Raspodjela troškova po kategorijama",
xaxis = list(title = "Kategorija"),
yaxis = list(title = "Iznos (€)"),
showlegend = FALSE
)
}
})
output$pie_chart <- renderPlotly({
result <- optimizeBudget()
if (result$status == 0) {
total_spent <- sum(result$solution)
savings <- input$total_budget - total_spent
values <- c(result$solution, savings)
labels <- c("Stanovanje", "Hrana", "Prijevoz", "Luksuz", "Ušteda")
colors <- c("#3498db", "#2ecc71", "#e74c3c", "#f1c40f", "#9b59b6")
plot_ly(
labels = labels,
values = values,
type = "pie",
marker = list(colors = colors),
textinfo = "label+percent"
) %>%
layout(
title = "Udio u ukupnom budžetu",
showlegend = TRUE
)
}
})
}
# Pokretanje aplikacije
shinyApp(ui = ui, server = server)
library(shiny)
library(lpSolve)
library(shinythemes)
library(plotly)
# UI definition
ui <- fluidPage(
theme = shinytheme("flatly"),
tags$head(
tags$style(HTML("
.well { background-color: #ffffff; }
.box-shadow {
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
padding: 15px;
border-radius: 5px;
margin-bottom: 20px;
background-color: white;
}
.category-header {
color: #2c3e50;
margin-bottom: 20px;
padding-bottom: 10px;
border-bottom: 2px solid #ecf0f1;
}
.pie-chart-section {
padding-top: 40px;
}
.shiny-input-container {
margin-bottom: 15px;
}
.action-button {
margin-top: 20px;
width: 100%;
}
#optimize {
background-color: #2980b9;
color: white;
padding: 10px;
font-size: 16px;
border: none;
border-radius: 5px;
transition: background-color 0.3s;
}
#optimize:hover {
background-color: #3498db;
}
"))
),
titlePanel(
div(class = "category-header",
h1("Optimizacija mjesečnog budžeta",
style = "color: #2c3e50; font-weight: 300;")
)
),
sidebarLayout(
sidebarPanel(
width = 4,
div(class = "box-shadow",
h4("Osnovne postavke", class = "category-header"),
numericInput("total_budget",
"Ukupni mjesečna primanja (€):",
value = 0, min = 0),
numericInput("savings_target",
"Željena mjesečna ušteda (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Stanovanje", class = "category-header"),
numericInput("housing_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("housing_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Hrana", class = "category-header"),
numericInput("food_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("food_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Prijevoz", class = "category-header"),
numericInput("transport_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("transport_max",
"Maksimalni troškovi (€):",
value = 0, min = 0)
),
div(class = "box-shadow",
h4("Luksuz/zabava", class = "category-header"),
numericInput("luxury_min",
"Minimalni troškovi (€):",
value = 0, min = 0),
numericInput("luxury_max",
"Maksimalni troškovi (€):",
value = 300, min = 0)
),
actionButton("optimize", "Optimiziraj budžet",
class = "action-button")
),
mainPanel(
width = 8,
div(class = "box-shadow",
h3("Optimalna raspodjela troškova:",
class = "category-header"),
verbatimTextOutput("results")
),
div(class = "box-shadow",
h3("Vizualizacija:",
class = "category-header"),
plotlyOutput("budget_plot"),
div(class = "pie-chart-section",
h3("Udio u ukupnom budžetu:",
class = "category-header"),
plotlyOutput("pie_chart")
)
)
)
)
)
# Server logic
server <- function(input, output) {
optimizeBudget <- eventReactive(input$optimize, {
# Postavljanje problema linearnog programiranja
# Koeficijenti funkcije cilja (minimiziramo ukupne troškove)
obj <- c(1, 1, 1, 1)  # Koeficijenti za stanovanje, hranu, prijevoz, luksuz
# Matrica ograničenja
const.mat <- matrix(c(
1, 1, 1, 1,    # Ukupni budžet
1, 0, 0, 0,    # Min stanovanje
1, 0, 0, 0,    # Max stanovanje
0, 1, 0, 0,    # Min hrana
0, 1, 0, 0,    # Max hrana
0, 0, 1, 0,    # Min prijevoz
0, 0, 1, 0,    # Max prijevoz
0, 0, 0, 1,    # Min luksuz
0, 0, 0, 1     # Max luksuz
), nrow = 9, byrow = TRUE)
# Desna strana ograničenja
rhs <- c(
input$total_budget - input$savings_target,  # Ukupni budžet minus ušteda
input$housing_min,    # Min stanovanje
input$housing_max,    # Max stanovanje
input$food_min,       # Min hrana
input$food_max,       # Max hrana
input$transport_min,  # Min prijevoz
input$transport_max,  # Max prijevoz
input$luxury_min,     # Min luksuz
input$luxury_max      # Max luksuz
)
# Znakovi ograničenja
const.dir <- c("<=", ">=", "<=", ">=", "<=", ">=", "<=", ">=", "<=")
# Rješavanje problema
solution <- lp("min", obj, const.mat, const.dir, rhs)
return(list(
status = solution$status,
solution = solution$solution
))
})
output$results <- renderPrint({
result <- optimizeBudget()
if (result$status == 0) {
total_spent <- sum(result$solution)
savings <- input$total_budget - total_spent
cat("Optimalna raspodjela troškova:\n\n")
cat(sprintf("📍 Stanovanje: %.2f €\n", result$solution[1]))
cat(sprintf("🍽️ Hrana: %.2f €\n", result$solution[2]))
cat(sprintf("🚌 Prijevoz: %.2f €\n", result$solution[3]))
cat(sprintf("🎉 Luksuz/zabava: %.2f €\n", result$solution[4]))
cat("\n--------------------------------\n")
cat(sprintf("💰 Ukupni troškovi: %.2f €\n", total_spent))
cat(sprintf("💵 Mjesečna ušteda: %.2f €\n", savings))
cat(sprintf("📊 Postotak uštede: %.1f%%\n", (savings/input$total_budget)*100))
} else {
cat("❌ Nije moguće pronaći optimalno rješenje s zadanim ograničenjima.\n")
cat("⚠️ Molimo prilagodite parametre.")
}
})
output$budget_plot <- renderPlotly({
result <- optimizeBudget()
if (result$status == 0) {
categories <- c("Stanovanje", "Hrana", "Prijevoz", "Luksuz")
plot_ly(
x = categories,
y = result$solution,
type = "bar",
marker = list(
color = c("#3498db", "#2ecc71", "#e74c3c", "#f1c40f")
)
) %>%
layout(
title = "Raspodjela troškova po kategorijama",
xaxis = list(title = "Kategorija"),
yaxis = list(title = "Iznos (€)"),
showlegend = FALSE
)
}
})
output$pie_chart <- renderPlotly({
result <- optimizeBudget()
if (result$status == 0) {
total_spent <- sum(result$solution)
savings <- input$total_budget - total_spent
values <- c(result$solution, savings)
labels <- c("Stanovanje", "Hrana", "Prijevoz", "Luksuz", "Ušteda")
colors <- c("#3498db", "#2ecc71", "#e74c3c", "#f1c40f", "#9b59b6")
plot_ly(
labels = labels,
values = values,
type = "pie",
marker = list(colors = colors),
textinfo = "label+percent"
) %>%
layout(
title = "Udio u ukupnom budžetu",
showlegend = TRUE
)
}
})
}
# Pokretanje aplikacije
shinyApp(ui = ui, server = server)
runApp('C:/Users/Maja/Desktop/Faks/V. semestar/Operacijska istraživanja/shiny app/Optimizacija mjesecnih troskova.R')
